// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Online_Store.Data;

namespace Online_Store.Migrations
{
    [DbContext(typeof(AppDataContext))]
    partial class AppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Online_Store.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Online_Store.Models.NotConfirmUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataBorn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("NotConfirmUsers");
                });

            modelBuilder.Entity("Online_Store.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Online_Store.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureGeneral")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureSecond")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureSubSecond")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid?>("SubSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubSectionId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Online_Store.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Picture0")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Online_Store.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dc6e38b-1687-4e74-a4c7-d2acbecfe6fc"),
                            Name = "USER"
                        },
                        new
                        {
                            Id = new Guid("b4e0ca41-0f9b-4a08-b42b-8024b4ce46c7"),
                            Name = "GUEST"
                        },
                        new
                        {
                            Id = new Guid("7645e9b7-f9ed-460d-997a-bda7af4c9f8b"),
                            Name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Online_Store.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubsectionCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Online_Store.Models.SubSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductCount")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("SubSections");
                });

            modelBuilder.Entity("Online_Store.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataBorn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductScore")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("088075c9-5a9b-4583-b0e4-279886d46a5d"),
                            DataBorn = new DateTime(2022, 2, 16, 23, 12, 17, 906, DateTimeKind.Local).AddTicks(8698),
                            Email = "admin@admin.by",
                            Login = "admin",
                            Name = "admin",
                            Number = "+37500000000",
                            Password = "admin",
                            ProductScore = 0,
                            RoleId = new Guid("7645e9b7-f9ed-460d-997a-bda7af4c9f8b"),
                            Surname = "admin",
                            Year = 0
                        });
                });

            modelBuilder.Entity("Online_Store.Models.Basket", b =>
                {
                    b.HasOne("Online_Store.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Online_Store.Models.NotConfirmUser", b =>
                {
                    b.HasOne("Online_Store.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Online_Store.Models.Order", b =>
                {
                    b.HasOne("Online_Store.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Online_Store.Models.Product", b =>
                {
                    b.HasOne("Online_Store.Models.Basket", null)
                        .WithMany("ListProducts")
                        .HasForeignKey("BasketId");

                    b.HasOne("Online_Store.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("Online_Store.Models.SubSection", "SubSection")
                        .WithMany("Product")
                        .HasForeignKey("SubSectionId");

                    b.Navigation("SubSection");
                });

            modelBuilder.Entity("Online_Store.Models.Review", b =>
                {
                    b.HasOne("Online_Store.Models.User", "AuthorUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("Online_Store.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("AuthorUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Online_Store.Models.SubSection", b =>
                {
                    b.HasOne("Online_Store.Models.Section", "Section")
                        .WithMany("SubSections")
                        .HasForeignKey("SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Online_Store.Models.User", b =>
                {
                    b.HasOne("Online_Store.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Online_Store.Models.Basket", b =>
                {
                    b.Navigation("ListProducts");
                });

            modelBuilder.Entity("Online_Store.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Online_Store.Models.Product", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Online_Store.Models.Section", b =>
                {
                    b.Navigation("SubSections");
                });

            modelBuilder.Entity("Online_Store.Models.SubSection", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("Online_Store.Models.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
